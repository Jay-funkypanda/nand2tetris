<tokens>
<keyword> class </keyword>
<identifier> Utils </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> _lastNum </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> PSEUDA_RAND_MULTIPLIER </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> PSEUDA_RAND_ADDER </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> MAX_DIST </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> initRandomSeed </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> _lastNum </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> PSEUDA_RAND_MULTIPLIER </identifier>
<symbol> = </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> PSEUDA_RAND_ADDER </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> MAX_DIST </identifier>
<symbol> = </symbol>
<integerConstant> 16354 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> random </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> limit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> res </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> res </identifier>
<symbol> = </symbol>
<identifier> Utils </identifier>
<symbol> . </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> _lastNum </identifier>
<symbol> , </symbol>
<identifier> limit </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> _lastNum </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> _lastNum </identifier>
<symbol> * </symbol>
<identifier> PSEUDA_RAND_MULTIPLIER </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> PSEUDA_RAND_ADDER </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> _lastNum </identifier>
<symbol> = </symbol>
<identifier> Utils </identifier>
<symbol> . </symbol>
<identifier> moduloPower2 </identifier>
<symbol> ( </symbol>
<identifier> _lastNum </identifier>
<symbol> , </symbol>
<integerConstant> 1024 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> res </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> boolean </keyword>
<identifier> isBound </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> num </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> num </identifier>
<symbol> &lt; </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> num </identifier>
<symbol> &gt; </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> getLastNum </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> _lastNum </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> num </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> res </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> num </identifier>
<symbol> &gt; </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> res </identifier>
<symbol> = </symbol>
<identifier> num </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> res </identifier>
<symbol> = </symbol>
<identifier> num </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> num </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> res </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> moduloPower2 </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> num </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<identifier> num </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> distance </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y1 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> x2 </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> gapX </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> gapY </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dist </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> gapX </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> - </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> gapY </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> y1 </identifier>
<symbol> - </symbol>
<identifier> y2 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dist </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> gapX </identifier>
<symbol> , </symbol>
<identifier> gapX </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> gapY </identifier>
<symbol> , </symbol>
<identifier> gapY </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dist </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dist </identifier>
<symbol> = </symbol>
<identifier> MAX_DIST </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> sqrt </identifier>
<symbol> ( </symbol>
<identifier> dist </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
