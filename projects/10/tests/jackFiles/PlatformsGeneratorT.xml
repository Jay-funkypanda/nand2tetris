<tokens>
<keyword> class </keyword>
<identifier> PlatformsGenerator </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> RandomNumbersGenerator </identifier>
<identifier> numsGenerator </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Platformlist </identifier>
<identifier> platformlist </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> PlatformsGenerator </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> Platformlist </identifier>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> platformlist </identifier>
<symbol> = </symbol>
<identifier> list </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> numsGenerator </identifier>
<symbol> = </symbol>
<identifier> RandomNumbersGenerator </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setSeed </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> enteredSeed </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> enteredSeed </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> platform </identifier>
<identifier> generatePlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> leftCoordinate </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> rightCoordinate </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> rightEdge </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Platform </identifier>
<identifier> newPlatform </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> leftCoordinate </identifier>
<symbol> = </symbol>
<identifier> numsGenerator </identifier>
<symbol> . </symbol>
<identifier> generateRandomNumber </identifier>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 230 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> + </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> rightEdge </identifier>
<symbol> = </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> rightEdge </identifier>
<symbol> = </symbol>
<identifier> leftCoordinate </identifier>
<symbol> + </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> leftCoordinate </identifier>
<symbol> = </symbol>
<integerConstant> 460 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightEdge </identifier>
<symbol> = </symbol>
<integerConstant> 500 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> rightEdge </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> leftCoordinate </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightEdge </identifier>
<symbol> = </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> rightCoordinate </identifier>
<symbol> = </symbol>
<identifier> numsGenerator </identifier>
<symbol> . </symbol>
<identifier> generateRandomNumber </identifier>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> , </symbol>
<identifier> leftCoordinate </identifier>
<symbol> , </symbol>
<identifier> rightEdge </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> &gt; </symbol>
<identifier> rightCoordinate </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> leftCoordinate </identifier>
<symbol> = </symbol>
<integerConstant> 350 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightCoordinate </identifier>
<symbol> = </symbol>
<integerConstant> 400 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> newPlatform </identifier>
<symbol> = </symbol>
<identifier> Platform </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> , </symbol>
<identifier> rightCoordinate </identifier>
<symbol> , </symbol>
<integerConstant> 245 </integerConstant>
<symbol> , </symbol>
<identifier> platformlist </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> newPlatform </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
