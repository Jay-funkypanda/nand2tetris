<tokens>
<keyword> class </keyword>
<identifier> in3 </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Cell </identifier>
<identifier> head </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Cell </identifier>
<identifier> tail </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Cell </identifier>
<identifier> food </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> in3 </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> string </identifier>
<identifier> city </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 150 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> head </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 100 </integerConstant>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<identifier> tail </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> food </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> , </symbol>
<integerConstant> 210 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 153 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> city </identifier>
<symbol> = </symbol>
<stringConstant> Pa	&lt; ris/* </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> city </identifier>
<symbol> = </symbol>
<stringConstant> p/* </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> city </identifier>
<symbol> = </symbol>
<stringConstant> /* </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> city </identifier>
<symbol> = </symbol>
<stringConstant> &amp;*/ </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> city </identifier>
<symbol> = </symbol>
<stringConstant> // </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> city </identifier>
<symbol> = </symbol>
<stringConstant> &lt;*/ </stringConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> tail </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Cell </identifier>
<identifier> varTemp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> varTemp </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> setNext </identifier>
<symbol> ( </symbol>
<identifier> varTemp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> varTemp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> eat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> varTemp </identifier>
<symbol> = </symbol>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> varTemp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ~ </symbol>
<identifier> crash </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveDown </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Cell </identifier>
<identifier> letTemp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 240 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> letTemp </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> setNext </identifier>
<symbol> ( </symbol>
<identifier> letTemp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> letTemp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> eat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> letTemp </identifier>
<symbol> = </symbol>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> letTemp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ~ </symbol>
<identifier> crash </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Cell </identifier>
<identifier> ifTemp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ifTemp </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> setNext </identifier>
<symbol> ( </symbol>
<identifier> ifTemp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> ifTemp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> eat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ifTemp </identifier>
<symbol> = </symbol>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> ifTemp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ~ </symbol>
<identifier> crash </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Cell </identifier>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 500 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> Cell </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> setNext </identifier>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> head </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> eat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> tail </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tail </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ~ </symbol>
<identifier> crash </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> eat </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> clash </identifier>
<symbol> ( </symbol>
<identifier> food </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 450 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> setX </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> setX </identifier>
<symbol> ( </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 200 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> setY </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> setY </identifier>
<symbol> ( </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> food </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> crash </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Cell </identifier>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> tail </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> head </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> clash </identifier>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> clash </identifier>
<symbol> ( </symbol>
<identifier> Cell </identifier>
<identifier> temp </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> temp </identifier>
<symbol> . </symbol>
<identifier> getSize </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> head </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
