<tokens>
<keyword> class </keyword>
<identifier> Platform </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Platform </identifier>
<identifier> next </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> rightCoordinate </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> leftCoordinate </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> horizontalLocation </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> PlatformsList </identifier>
<identifier> list </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Platform </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> lCoordinate </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> rCoordinate </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> hl </identifier>
<symbol> , </symbol>
<identifier> PlatformsList </identifier>
<identifier> platformsList </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> leftCoordinate </identifier>
<symbol> = </symbol>
<identifier> lCoordinate </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rightCoordinate </identifier>
<symbol> = </symbol>
<identifier> rCoordinate </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> horizontalLocation </identifier>
<symbol> = </symbol>
<identifier> hl </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> list </identifier>
<symbol> = </symbol>
<identifier> platformsList </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawPlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> slower </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> slower </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> slower </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> slower </identifier>
<symbol> = </symbol>
<identifier> slower </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> , </symbol>
<identifier> rightCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> hasNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setNext </identifier>
<symbol> ( </symbol>
<identifier> Platform </identifier>
<identifier> nextPlatform </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> nextPlatform </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> Platform </identifier>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> next </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> horizontalLocation </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> , </symbol>
<identifier> rightCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> horizontalLocation </identifier>
<symbol> = </symbol>
<identifier> horizontalLocation </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> , </symbol>
<identifier> rightCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> disposePlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> disposePlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> leftCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> , </symbol>
<identifier> rightCoordinate </identifier>
<symbol> , </symbol>
<identifier> horizontalLocation </identifier>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> list </identifier>
<symbol> . </symbol>
<identifier> removePlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> xCoordinate </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> yCoordinate </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> yCoordinate </identifier>
<symbol> + </symbol>
<integerConstant> 7 </integerConstant>
<symbol> &lt; </symbol>
<identifier> horizontalLocation </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> yCoordinate </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> &gt; </symbol>
<identifier> horizontalLocation </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> xCoordinate </identifier>
<symbol> &lt; </symbol>
<identifier> leftCoordinate </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> xCoordinate </identifier>
<symbol> &gt; </symbol>
<identifier> rightCoordinate </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
