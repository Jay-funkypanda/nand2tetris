<tokens>
<keyword> class </keyword>
<identifier> FrogGame </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Frog </identifier>
<identifier> frog </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Fly </identifier>
<identifier> fly </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> flyLoc </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log1 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log2 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log3 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log4 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log5 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log6 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log7 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Log </identifier>
<identifier> log8 </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> speed </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> score </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> FrogGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log1 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<integerConstant> 165 </integerConstant>
<symbol> , </symbol>
<integerConstant> 19 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log2 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 41 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<keyword> false </keyword>
<symbol> , </symbol>
<integerConstant> 123 </integerConstant>
<symbol> , </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log3 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 72 </integerConstant>
<symbol> , </symbol>
<integerConstant> 300 </integerConstant>
<symbol> , </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<integerConstant> 164 </integerConstant>
<symbol> , </symbol>
<integerConstant> 23 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log4 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 103 </integerConstant>
<symbol> , </symbol>
<integerConstant> 150 </integerConstant>
<symbol> , </symbol>
<keyword> false </keyword>
<symbol> , </symbol>
<integerConstant> 191 </integerConstant>
<symbol> , </symbol>
<integerConstant> 17 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log5 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 134 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<integerConstant> 183 </integerConstant>
<symbol> , </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log6 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 165 </integerConstant>
<symbol> , </symbol>
<integerConstant> 300 </integerConstant>
<symbol> , </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<integerConstant> 130 </integerConstant>
<symbol> , </symbol>
<integerConstant> 22 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log7 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 196 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<keyword> false </keyword>
<symbol> , </symbol>
<integerConstant> 198 </integerConstant>
<symbol> , </symbol>
<integerConstant> 18 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> log8 </identifier>
<symbol> = </symbol>
<identifier> Log </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 227 </integerConstant>
<symbol> , </symbol>
<integerConstant> 305 </integerConstant>
<symbol> , </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<integerConstant> 169 </integerConstant>
<symbol> , </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> frog </identifier>
<symbol> = </symbol>
<identifier> Frog </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flyLoc </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fly </identifier>
<symbol> = </symbol>
<identifier> Fly </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> flyLoc </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log1 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log2 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log3 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log4 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log5 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log6 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log7 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log8 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> displayLogs </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<identifier> speed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log1 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log2 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log3 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log4 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log5 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log6 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log7 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> log8 </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> isGameOver </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> go </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log1 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log2 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log3 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log4 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log5 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log6 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log7 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> log8 </identifier>
<symbol> . </symbol>
<identifier> isFrogOnLog </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> go </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> go </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> GAME OVER YOU SUCK! :) YOUR SCORE IS :   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> score </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> sHelp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sHelp </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> displayLogs </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> isGameOver </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 81 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> EXITING THE GAME, YOUR SCORE IS :  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> score </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 131 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 133 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> displayLogs </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> isGameOver </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> moveSquare </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> isGameOver </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> checkFly </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> speed </identifier>
<symbol> &gt; </symbol>
<integerConstant> 2 </integerConstant>
<symbol> &amp; </symbol>
<identifier> sHelp </identifier>
<symbol> = </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<identifier> speed </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sHelp </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> sHelp </identifier>
<symbol> = </symbol>
<identifier> sHelp </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<integerConstant> 20 </integerConstant>
<symbol> - </symbol>
<identifier> speed </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> checkFly </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> eaten </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> eaten </identifier>
<symbol> = </symbol>
<identifier> isFlyEaten </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> eaten </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> flyLoc </identifier>
<symbol> = </symbol>
<identifier> flyLoc </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> flyLoc </identifier>
<symbol> &gt; </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> flyLoc </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> erase </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fly </identifier>
<symbol> = </symbol>
<identifier> Fly </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> flyLoc </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> isFlyEaten </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> fly_x_smaller </identifier>
<symbol> , </symbol>
<identifier> fly_y_smaller </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> fly_x_eaten </identifier>
<symbol> , </symbol>
<identifier> fly_y_eaten </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fly_x_smaller </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> x </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fly_y_smaller </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<identifier> fly </identifier>
<symbol> . </symbol>
<identifier> y </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fly_x_eaten </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> dx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> fly_y_eaten </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> dy </identifier>
<symbol> &lt; </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> fly_x_eaten </identifier>
<symbol> &amp; </symbol>
<identifier> fly_y_eaten </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveSquare </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> moveDown </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> frog </identifier>
<symbol> . </symbol>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
