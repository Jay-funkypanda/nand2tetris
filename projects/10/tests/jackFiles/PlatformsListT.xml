<tokens>
<keyword> class </keyword>
<identifier> PlatformsList </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Platform </identifier>
<identifier> first </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Platform </identifier>
<identifier> last </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> PlatformsList </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> first </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> last </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Platform </identifier>
<identifier> pointer </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> first </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> pointer </identifier>
<symbol> = </symbol>
<identifier> first </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> pointer </identifier>
<symbol> . </symbol>
<identifier> hasNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> pointer </identifier>
<symbol> . </symbol>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> pointer </identifier>
<symbol> = </symbol>
<identifier> pointer </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> add </identifier>
<symbol> ( </symbol>
<identifier> Platform </identifier>
<identifier> newPlatform </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> first </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> first </identifier>
<symbol> = </symbol>
<identifier> newPlatform </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> last </identifier>
<symbol> = </symbol>
<identifier> newPlatform </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> last </identifier>
<symbol> . </symbol>
<identifier> setNext </identifier>
<symbol> ( </symbol>
<identifier> newPlatform </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> last </identifier>
<symbol> = </symbol>
<identifier> newPlatform </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> removePlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> first </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> first </identifier>
<symbol> . </symbol>
<identifier> hasNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> first </identifier>
<symbol> = </symbol>
<identifier> first </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> first </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> last </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> xCoordinate </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> yCoordinate </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Platform </identifier>
<identifier> pointer </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> first </identifier>
<symbol> = </symbol>
<keyword> null </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> pointer </identifier>
<symbol> = </symbol>
<identifier> first </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> pointer </identifier>
<symbol> . </symbol>
<identifier> hasNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> pointer </identifier>
<symbol> . </symbol>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<identifier> xCoordinate </identifier>
<symbol> , </symbol>
<identifier> yCoordinate </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> pointer </identifier>
<symbol> = </symbol>
<identifier> pointer </identifier>
<symbol> . </symbol>
<identifier> getNext </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
