<tokens>
<keyword> class </keyword>
<identifier> RapidRollGame </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Ball </identifier>
<identifier> myBall </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> scores </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> gameOver </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> PlatformsGenerator </identifier>
<identifier> platsGenerator </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> RandomNumbersGenerator </identifier>
<identifier> numsGenerator </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> PlatformsList </identifier>
<identifier> platformsList </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> RapidRollGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> platformsList </identifier>
<symbol> = </symbol>
<identifier> PlatformsList </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> platsGenerator </identifier>
<symbol> = </symbol>
<identifier> PlatformsGenerator </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> platformsList </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> numsGenerator </identifier>
<symbol> = </symbol>
<identifier> RandomNumbersGenerator </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> myBall </identifier>
<symbol> = </symbol>
<identifier> Ball </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> , </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> gameOver </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> clockCycle </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> seedTaken </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> gameOver </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> direction </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> randomSeed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> clockCycle </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> seedTaken </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> gameOver </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> clockCycle </identifier>
<symbol> = </symbol>
<identifier> clockCycle </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> clockCycle </identifier>
<symbol> = </symbol>
<identifier> clockCycle </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> platformsList </identifier>
<symbol> . </symbol>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> makePlatform </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> makePlatform </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> seedTaken </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> randomSeed </identifier>
<symbol> = </symbol>
<identifier> numsGenerator </identifier>
<symbol> . </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> platsGenerator </identifier>
<symbol> . </symbol>
<identifier> setSeed </identifier>
<symbol> ( </symbol>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> seedTaken </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> randomSeed </identifier>
<symbol> = </symbol>
<identifier> clockCycle </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> makePlatform </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> direction </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> clockCycle </identifier>
<symbol> = </symbol>
<identifier> clockCycle </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> makePlatform </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> platformsList </identifier>
<symbol> . </symbol>
<identifier> moveUp </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> myBall </identifier>
<symbol> . </symbol>
<identifier> move </identifier>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> makePlatform </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> makePlatform </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> randomSeed </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> platformGenereateTime </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> toGenerate </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> platformGenereateTime </identifier>
<symbol> = </symbol>
<identifier> numsGenerator </identifier>
<symbol> . </symbol>
<identifier> generateRandomNumber </identifier>
<symbol> ( </symbol>
<identifier> randomSeed </identifier>
<symbol> , </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 240 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> toGenerate </identifier>
<symbol> = </symbol>
<identifier> numsGenerator </identifier>
<symbol> . </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> clockCycle </identifier>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> toGenerate </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> platsGenerator </identifier>
<symbol> . </symbol>
<identifier> setSeed </identifier>
<symbol> ( </symbol>
<identifier> platformGenereateTime </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> addPlatform </identifier>
<symbol> ( </symbol>
<identifier> platsGenerator </identifier>
<symbol> . </symbol>
<identifier> generatePlatform </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> gameOver </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> gameOver </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> addPlatform </identifier>
<symbol> ( </symbol>
<identifier> Platform </identifier>
<identifier> platform </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> platformsList </identifier>
<symbol> . </symbol>
<identifier> add </identifier>
<symbol> ( </symbol>
<identifier> platform </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> PlatformsList </identifier>
<identifier> getPlatformsList </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> platformsList </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> xCoordinate </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> yCoordinate </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> platformsList </identifier>
<symbol> . </symbol>
<identifier> isOnPlatform </identifier>
<symbol> ( </symbol>
<identifier> xCoordinate </identifier>
<symbol> , </symbol>
<identifier> yCoordinate </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
