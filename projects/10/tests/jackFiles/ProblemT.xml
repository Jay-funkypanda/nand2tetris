<tokens>
<keyword> class </keyword>
<identifier> Problem </identifier>
<symbol> { </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> addFruit </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> fruits </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> arrayLength </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Fruit </identifier>
<identifier> newFruit </identifier>
<symbol> , </symbol>
<identifier> tempFruit </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> newFruit </identifier>
<symbol> = </symbol>
<identifier> Fruit </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> arrayLength </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> tempFruit </identifier>
<symbol> = </symbol>
<identifier> fruits </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> newFruit </identifier>
<symbol> . </symbol>
<identifier> getLetter </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> tempFruit </identifier>
<symbol> . </symbol>
<identifier> getLetter </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> newFruit </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> fruits </identifier>
<symbol> [ </symbol>
<identifier> arrayLength </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> newFruit </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> arrayLength </identifier>
<symbol> = </symbol>
<identifier> arrayLength </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
