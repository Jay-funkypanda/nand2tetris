<tokens>
<keyword> class </keyword>
<identifier> RandomNumbersGenerator </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lastCreatedRandNum </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> RandomNumbersGenerator </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> lastCreatedRandNum </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> generateRandomNumber </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> from </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> to </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> multiplier </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> modulus </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> increment </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> createdRandNum </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lastCreatedRandNum </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> modulus </identifier>
<symbol> = </symbol>
<identifier> to </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> multiplier </identifier>
<symbol> = </symbol>
<integerConstant> 83 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> increment </identifier>
<symbol> = </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> createdRandNum </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> multiplier </identifier>
<symbol> * </symbol>
<identifier> lastCreatedRandNum </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> createdRandNum </identifier>
<symbol> = </symbol>
<identifier> createdRandNum </identifier>
<symbol> + </symbol>
<identifier> increment </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> createdRandNum </identifier>
<symbol> = </symbol>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<identifier> createdRandNum </identifier>
<symbol> , </symbol>
<identifier> modulus </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> createdRandNum </identifier>
<symbol> = </symbol>
<identifier> createdRandNum </identifier>
<symbol> + </symbol>
<identifier> from </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lastCreatedRandNum </identifier>
<symbol> = </symbol>
<identifier> createdRandNum </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> createdRandNum </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> modulo </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> num </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> modulus </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> div </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> modulo </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> div </identifier>
<symbol> = </symbol>
<identifier> num </identifier>
<symbol> / </symbol>
<identifier> modulus </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> modulo </identifier>
<symbol> = </symbol>
<identifier> num </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> div </identifier>
<symbol> * </symbol>
<identifier> modulus </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> modulo </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
