<tokens>
<keyword> class </keyword>
<identifier> try2 </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> className </identifier>
<identifier> c1 </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> className </identifier>
<identifier> c2 </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> _d2 </identifier>
<symbol> ; </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> doS </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> doT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> x3 </identifier>
<symbol> , </symbol>
<identifier> x4 </identifier>
<symbol> , </symbol>
<identifier> x5 </identifier>
<symbol> , </symbol>
<identifier> x6 </identifier>
<symbol> , </symbol>
<identifier> x7 </identifier>
<symbol> , </symbol>
<identifier> x8 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<stringConstant> dddd // /* t </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<stringConstant>  // /*  </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x3 </identifier>
<symbol> = </symbol>
<stringConstant>  //  </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x4 </identifier>
<symbol> = </symbol>
<stringConstant>  /*  </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x5 </identifier>
<symbol> = </symbol>
<stringConstant>  */  </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x6 </identifier>
<symbol> = </symbol>
<stringConstant>  /* */  </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x7 </identifier>
<symbol> = </symbol>
<stringConstant>   *//*//  </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x8 </identifier>
<symbol> = </symbol>
<stringConstant>  \t */\t/*/\t/ fff\thhl  </stringConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> underscore </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> _c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> _c </identifier>
<symbol> = </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> checkDoS </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> f </identifier>
<symbol> , </symbol>
<identifier> offset </identifier>
<symbol> , </symbol>
<identifier> base </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> GGG </identifier>
<symbol> . </symbol>
<identifier> d </identifier>
<symbol> ( </symbol>
<identifier> AAA </identifier>
<symbol> . </symbol>
<identifier> c </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> f </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> base </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> offset </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> checkDoLL </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> M </identifier>
<symbol> . </symbol>
<identifier> t </identifier>
<symbol> ( </symbol>
<identifier> M </identifier>
<symbol> . </symbol>
<identifier> s </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> checkvar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> className </identifier>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> checkStrSend </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> p </identifier>
<symbol> , </symbol>
<identifier> mess </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> p </identifier>
<symbol> = </symbol>
<stringConstant> fff </stringConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> try2 </identifier>
<symbol> . </symbol>
<identifier> checkStr </identifier>
<symbol> ( </symbol>
<stringConstant> ddd </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> try2 </identifier>
<symbol> . </symbol>
<identifier> checkStr </identifier>
<symbol> ( </symbol>
<identifier> p </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mess </identifier>
<symbol> = </symbol>
<stringConstant>  |  Fruits dropped:  </stringConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<identifier> mess </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> ///t*/\* </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> checkStr </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> str </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> str </identifier>
<symbol> = </symbol>
<stringConstant> rrr </stringConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> checkPrint </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> str </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> W </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> checkSpace </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> str </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> checkMinus </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> j </identifier>
<symbol> , </symbol>
<identifier> p </identifier>
<symbol> , </symbol>
<identifier> offset </identifier>
<symbol> , </symbol>
<identifier> base </identifier>
<symbol> , </symbol>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> p </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 2 </integerConstant>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> base </identifier>
<symbol> + </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> offset </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> - </symbol>
<identifier> j </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> checkNeg </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> j </identifier>
<symbol> , </symbol>
<identifier> p </identifier>
<symbol> , </symbol>
<identifier> offset </identifier>
<symbol> , </symbol>
<identifier> base </identifier>
<symbol> , </symbol>
<identifier> e </identifier>
<symbol> , </symbol>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 113 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 81 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> base </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> j </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> e </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> base </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
