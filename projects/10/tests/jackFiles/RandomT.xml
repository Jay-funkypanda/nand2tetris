<tokens>
<keyword> class </keyword>
<identifier> Random </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> seed </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> user_input </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> seed </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> user_input </identifier>
<symbol> , </symbol>
<integerConstant> 1000 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> &gt; </symbol>
<integerConstant> 20000 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<integerConstant> 17 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> seed </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> changeSeed </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> change </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> seed </identifier>
<symbol> + </symbol>
<identifier> change </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> &gt; </symbol>
<integerConstant> 20000 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> seed </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> seed </identifier>
<symbol> = </symbol>
<identifier> change </identifier>
<symbol> + </symbol>
<integerConstant> 17 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> mod </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> div </identifier>
<symbol> , </symbol>
<identifier> mult </identifier>
<symbol> , </symbol>
<identifier> mod </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> div </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> divide </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> , </symbol>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mult </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> multiply </identifier>
<symbol> ( </symbol>
<identifier> b </identifier>
<symbol> , </symbol>
<identifier> div </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mod </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> - </symbol>
<identifier> mult </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> mod </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> getRadius </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> return_radius </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> return_radius </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> return_radius </identifier>
<symbol> = </symbol>
<identifier> return_radius </identifier>
<symbol> + </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> return_radius </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> boolean </keyword>
<identifier> isBomb </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> isBomb </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> isBomb </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> isBomb </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> boolean </keyword>
<identifier> isDirection </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> isDirection </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> isDirection </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> isDirection </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> getFactor </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> factor </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> factor </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> factor </identifier>
<symbol> = </symbol>
<identifier> factor </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> factor </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> factor </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> getOffset </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> offset </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> offset </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> offset </identifier>
<symbol> = </symbol>
<identifier> offset </identifier>
<symbol> + </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> offset </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> offset </identifier>
<symbol> = </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> offset </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> getChar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> return_char </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> return_char </identifier>
<symbol> = </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> Random </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> return_char </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> return_char </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> return_char </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> return_char </identifier>
<symbol> = </symbol>
<identifier> return_char </identifier>
<symbol> + </symbol>
<integerConstant> 65 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> return_char </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
