/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Registers   
    ARegister(in=mux1res, load=loadA, out=Aout, out[0..14]=addressM); // A register
    DRegister(in=aluout, load=loadD, out=Dout); // D register
    
    // Register control bits 
    And(a=instruction[4], b=instruction[15], out=loadD);
    Not(in=instruction[15], out=tmpLoadA);
    Or(a=instruction[5], b=tmpLoadA, out=loadA);
    
    // Use extended ALU with instruction[6..14]
    ExtendAlu(x=Dout, y=mux2res, instruction=instruction[6..14], zr=iszero, ng=isneg, out=aluout, out=outM);

    // if leftmost bit of instruction is 0, write instruction to A.
    // mux1res is the result of the left mux in the Figure 5.9. mux2res is the right one.
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=mux1res); 
    Mux16(a=Aout, b=inM, sel=instruction[12], out=mux2res);
    
    // PC & Jump handling
    And(a=isneg, b=instruction[2], out=jmp1);
    And(a=iszero, b=instruction[1], out=jmp2);
    
    Or(a=isneg, b=iszero, out=tmpIspos);
    Not(in=tmpIspos, out=ispos);
    And(a=ispos, b=instruction[0], out=jmp3);
    
    Or(a=jmp1, b=jmp2, out=tmpor);
    Or(a=tmpor, b=jmp3, out=tmpJmp);
    
    And(a=tmpJmp, b=instruction[15], out=jmp);
    PC(in=Aout, load=jmp, inc=true, reset=reset, out[0..14]=pc);
    
    // Change writeM
    And(a=instruction[3], b=instruction[15], out=writeM);
}
