/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
*
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/

CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
     
     // Find ALU result
     And(a=instruction[7], b=instruction[8], out=doAlu);
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2],  
         f=instruction[1], no=instruction[0], zr=zrAlu, ng=ngAlu, out=outAlu);
     
     // Find Mul result
     Mul(a=x, b=y, out=outMul);
    
     // Find shift result     
     ShiftLeft(in=x, out=outXShiftLeft);
     ShiftLeft(in=y, out=outYShiftLeft);
     ShiftRight(in=x, out=outXShiftRight);
     ShiftRight(in=y, out=outYShiftRight);
     Mux4Way16(a=outYShiftRight, b=outXShiftRight, c=outYShiftLeft, d=outXShiftLeft, sel=instruction[4..5], out=outShift);
    
     // Compute output, zr, ng according to instruction[7..8]    
     Mux4Way16(a=outMul, b=outShift, c=outMul, d=outAlu, sel=instruction[7..8], out=tmpOut1, out=tmpOut2, out=out);
     IsNeg16(in=tmpOut1, out=ng);
     Or16Way(in=tmpOut2, out=notZero);
     Not(in=notZero, out=zr);
}
