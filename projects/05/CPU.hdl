// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Registers	
	ARegister(in=mux1res, load=loadA, out=Aout, out[0..14]=addressM); // A register
	DRegister(in=aluout, load=loadD, out=Dout); // D register
	
    // Register control bits 
	And(a=instruction[4], b=instruction[15], out=loadD);
	Not(in=instruction[15], out=tmpLoadA);
	Or(a=instruction[5], b=tmpLoadA, out=loadA);

	// ALU - Control bits are c1..c6
	ALU(x=Dout, y=mux2res, zx=instruction[11] ,nx=instruction[10] , zy=instruction[9],
	      ny=instruction[8] , f=instruction[7] , no=instruction[6] ,
	      zr=iszero, ng=isneg, out=aluout, out=outM);
	      
	// if leftmost bit of instruction is 0, write instruction to A.
	// mux1res is the result of the left mux in the Figure 5.9. mux2res is the right one.
	Mux16(a=instruction, b=aluout, sel=instruction[15], out=mux1res); 
	Mux16(a=Aout, b=inM, sel=instruction[12], out=mux2res);
    
	// PC & Jump handling
	And(a=isneg, b=instruction[2], out=jmp1);
	And(a=iszero, b=instruction[1], out=jmp2);
	
	Or(a=isneg, b=iszero, out=tmpIspos);
	Not(in=tmpIspos, out=ispos);
	And(a=ispos, b=instruction[0], out=jmp3);
	
	Or(a=jmp1, b=jmp2, out=tmpor);
	Or(a=tmpor, b=jmp3, out=tmpJmp);
	
	And(a=tmpJmp, b=instruction[15], out=jmp);
	PC(in=Aout, load=jmp, inc=true, reset=reset, out[0..14]=pc);
	
	// Change writeM
	And(a=instruction[3], b=instruction[15], out=writeM);
}