// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
    
    static Array mem;
    static int heap_base;
    static int heap_end;
    static int free;
    
    /** Initializes memory parameters. */
    function void init() 
    {
        let mem = 0;
        let heap_base = 2048;
        let heap_end = 16383;
        let free = heap_base + 2;
        let mem[free - 1] = heap_end - heap_base - 2 ;
        let mem[free - 2] = -1;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) 
    {
        return mem[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) 
    {
        let mem[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) 
    {
        var int ptr, new_block, prev_ptr;
        
        if (size < 0)
        {
            do Sys.error(5);
        }
        
        let ptr = free;
        let prev_ptr = -1;
        
        while ( (mem[ptr - 1] < size))
        {
            let prev_ptr = ptr;
            let ptr = mem[ptr - 2];
        }
        
        if (ptr = -1)
        {
            do Sys.error(6);
        }
        
        // There's more space in the block
        if (mem[ptr - 1] > size + 2)
        {
            if (prev_ptr > -1)
            {
                let new_block = ptr + size + 2;
                let mem[prev_ptr - 2] = new_block;
                let mem[new_block - 2] = mem[ptr - 2];
                let mem[new_block - 1] = mem[ptr - 1] - (size + 2);
            }
            else
            {
                let free = ptr + size + 2;
                let mem[free - 1] = mem[ptr - 1] - (size + 2);
                let mem[free - 2] = mem[ptr - 2];
            }
        }
        
        // No more space in block
        else
        {
            if (prev_ptr > -1)
            {
                let mem[prev_ptr - 2] = mem[ptr - 2];
            }
            else
            {
                let free = mem[ptr - 2];
            }
        }
        
        let mem[ptr - 1] = size;
        return ptr - 1;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) 
    {
        let mem[object - 1] = free;
        let free = object  + 1;
        return;
    }    
}












