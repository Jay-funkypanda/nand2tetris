// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    
    static Array powers;
    
    /** Initializes the library. */
    function void init() 
    {
        do Math.initPowers();
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
        if (x < 0)
        {
            let x = -x;
        }
        return x;
    }
    
    /**
     * Inits the 16-cell powers-of-2 array with 1, 1+1, (1+1) + (1+1), ...
     * Used as bit masks for multiplication.
     */
    function void initPowers()
    {
        var int i;
        var int val;
        
        let val = 1;
        let i = 0;
        
        let powers = Array.new(16);
        
        while (i < 16)
        {
            let powers[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        
        return;
    }
    
    /** Returns the integer part of x/y. */
    function int divide(int x, int y) 
    {
        if (y = 0)
        {
            do Sys.error(3);
        }
        
        if ( ((x < 0) & (y > 0)) | ((x > 0) & (y < 0)) )
        {
            return -Math.recDivide(Math.abs(x), Math.abs(y));
        }
        return Math.recDivide(Math.abs(x), Math.abs(y));
    }
    
    /**
     * A recursive division algorithm.
     * Assumes a,y are positive.
     */
    function int recDivide(int x, int y)
    {
        var int q;
        if ((y > x) | (y < 0))
        {
            return 0;
        }
        
        let q = Math.recDivide(x, y + y);
        if ( (x- ((q + q) * y)) < y)
        {
            return q + q;
        }
        else
        {
            return (q + q) + 1;
        }
    }
    
    
    /** Returns the product of x and y. */
    function int multiply(int x, int y) 
    {
        var int i, sum, shifted_x;
        
        let sum = 0;
        let shifted_x = x;
        let i = 0;
        
        while(i < 16)
        {
            if ( (y & powers[i]) = powers[i])
            {
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        
        return sum;
    }
    

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) 
    {
        var int low, high, mid, square;

        if (x < 0)
        {
            do Sys.error(4);
        }

        let low = 0;
        let high = 182; // Maximum possible integer square root
        
        while ((low + 1) < high)
        {
            let mid = low + ((high-low) / 2);
            let square = mid * mid;
            
            if (square = x)
            {
                return mid;
            }
            else
            {
                if (square < x)
                {
                    let low = mid;
                }
                else
                {
                    let high = mid;
                }
            }
        }
        return low;
    }

    /** Returns the greater number. */
    function int max(int a, int b) 
    {
        if (b > a)
        {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) 
    {
        if (b < a)
        {
            return b;        
        }
        return a;
    }
}






