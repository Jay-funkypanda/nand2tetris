// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    
    static bool color;
    static int SCR;
    static Array powers;
    static int max_x;
    static int max_y;
    
    /** Initializes the Screen. */
    function void init() 
    {
        let SCR = 16384;
        let max_x = 511;
        let max_y = 255;
        do Screen.initPowers();
        do Screen.setColor(true);
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() 
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, max_x, max_y);
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) 
    {
        let color = b;
        return;
    }
    
    /** Returns x modulu 16 */
    function int mod16(int x)
    {
        return (x & 15);
    }
    
    /** Inits the powers-of-2 array */
    function void initPowers()
    {
        var int i;
        var int val;
        
        let val = 1;
        let i = 0;
        
        let powers = Array.new(16);
        
        while (i < 16)
        {
            let powers[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        
        return;
    }
    
    /** Returns the base address for the pixel at (x,y) on the screen */
    function int getPixelAddress(int x, int y)
    {
        return SCR + (y*32) + (x/16);
    }
    
    /** Returns true iff coordinate (x,y) is out of screen bounds */
    function bool illegalCoordinate(int x, int y)
    {
        return ( (x < 0) | (x > max_x) | (y < 0) | (y > max_y) );
    }
    
    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) 
    {
        var int address;
        
        if (Screen.illegalCoordinate(x, y))
        {
            do Sys.error(7);
            return;
        }
        
        let address = Screen.getPixelAddress(x, y);
        
        do Screen.drawPixelInAddress(address, x);
        
        return;
    }
    
    /** 
     * Draws a pixel (in the current color) at the specified address.
     * x is the screen x coordinate of the pixel.
     */
    function void drawPixelInAddress(int address, int x)
    {
        var int cur_val, change_bit, cur_bit, new_val;
        let cur_val = Memory.peek(address);
        
        let change_bit = powers[Screen.mod16(x)];

        if (color)
        {
            let new_val = cur_val | change_bit;
        }
        else
        {
            let new_val = cur_val & (~change_bit);
        }
        do Memory.poke(address, new_val);
        return;
    }
    
    /* Draws a vertical line from y1 to y2 at column x **/
    function void drawVerticalLine(int x, int y1, int y2)
    {
        var int tmp;
        
        if (y1 > y2)
        {
            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;            
        }
        
        while (y1 < (y2 + 1))
        {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        
        return;
    }
    
    /* Draws a horizontal line, pixel by pixel, from x1 to x2 at row y */
    function void drawHorizontalLinePixels(int y, int x1, int x2)
    {
        
        var int tmp, address;
        
        if (x1 > x2)
        {
            let tmp = x2;
            let x2 = x1;
            let x1 = tmp;            
        }
        
        let address = Screen.getPixelAddress(x1, y);
        
        while (x1 < (x2 + 1))
        {
            do Screen.drawPixelInAddress(address, x1);
            let x1 = x1 + 1;
            if (Screen.mod16(x1) = 0)
            {
                let address = address + 1;
            }
        }
        return;
    }
    
    /* Draws a horizontal line from x1 to x2 at row y */
    function void drawHorizontalLine(int y, int x1, int x2)
    {
        var int bulk_start, bulk_end, address;
        
        if ((x2 - x1) > 15)
        {
            let bulk_start = x1 + (16 - Screen.mod16(x1));
            let bulk_end = x2 - Screen.mod16(x2);

            let address = Screen.getPixelAddress(bulk_start, y);
            
            while (bulk_start < bulk_end)
            {
                do Memory.poke(address, color);
                let address = address + 1;
                let bulk_start = bulk_start + 16;
            }
            
            do Screen.drawHorizontalLinePixels(y, x1, bulk_start);
            do Screen.drawHorizontalLinePixels(y, bulk_end, x2);
        }
        else
        {
            do Screen.drawHorizontalLinePixels(y, x1, x2);
        }
        return;
    }
    
    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        var int dx, dy, a, b, tmp;
        
        if ( Screen.illegalCoordinate(x1, y1) | Screen.illegalCoordinate(x2, y2) )
        {
            do Sys.error(8);
        }
        
        if (x1 = x2)
        {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        
        if (y1 = y2)
        {
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }
        
        
        // Decline
        if (((x2 < x1) & (y2 < y1) ) | ((x2 > x1) & (y2 > y1) ))
        {
            if (((x2 < x1) & (y2 < y1)))
            {
                let tmp = x2;
                let x2 = x1;
                let x1 = tmp;
                
                let tmp = y2;
                let y2 = y1;
                let y1 = tmp;
            }

            // from here assuming x1<x2, y1<y2
            
            let dx = x2 - x1; // dx > 0
            let dy = y2 - y1; // dy > 0
            
            let a = 0;
            let b = 0;
            let tmp = 0; // This is "a*dy_minus_b*dx"
            
            while ((a < (dx + 1)) | (b < (dy + 1)))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (tmp < 0) // i.e a/dx < b/dy
                {
                    let a = a + 1;
                    let tmp = tmp + dy;
                }
                else
                {
                    let b = b + 1;
                    let tmp = tmp -dx;
                }
            }
            
            return;
        }
        
        // Incline
        
        if (x1 > x2)
        {
            let tmp = x2;
            let x2 = x1;
            let x1 = tmp;
            
            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;            
        }
        
        // from here assuming x1<x2, y1>y2
        
        let dx = x2 - x1; // dx > 0
        let dy = y2 - y1; // dy < 0
        
        let a = 0;
        let b = 0;
        let tmp = 0; // This is "ady_minus_bdx"
        
        while ((a < (dx + 1)) | (b > (dy - 1)))
        {
            do Screen.drawPixel(x1 + a, y1 + b);
            
            if (tmp < 0) // i.e a/dx < b/dy
            {
    			let b = b - 1;
    			let tmp = tmp + dx;
    		}
    		else
    		{
    			let a = a + 1;
    			let tmp = tmp + dy;
            }        
        }
        
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        var int tmp;
        
        if ( Screen.illegalCoordinate(x1, y1) | Screen.illegalCoordinate(x2, y2) )
        {
            do Sys.error(9);
        }
        
        if (y2 < y1)
        {
            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;
        }   
        
        while(y1 < (y2 + 1))
        {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) 
    {
        var int dx, dy;
        
        if (Screen.illegalCoordinate(cx, cy))
        {
            do Sys.error(12);
        }
        
        if ( Screen.illegalCoordinate(cx + r, cy) | Screen.illegalCoordinate(cx - r, cy)
            | Screen.illegalCoordinate(cx, cy + r) | Screen.illegalCoordinate(cx, cy - r) )
        {
            do Sys.error(13);
        }
        let dy = -r;
        
        while (dy < (r+1))
        {
            let dx = Math.sqrt((r*r)-(dy*dy));
            do Screen.drawLine( (cx-dx), (cy+dy), (cx+dx), (cy+dy));
            let dy = dy + 1;
        }
        
        return;
    }
}





