/**
* Multiplies two binary numbers.
*/

CHIP Mul{
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    MulStep(a=a, b=b, prevsum=false, out=res1, aout=a1, bout=b1);
    MulStep(a=a1, b=b1, prevsum=res1, out=res2, aout=a2, bout=b2);
    MulStep(a=a2, b=b2, prevsum=res2, out=res3, aout=a3, bout=b3);
    MulStep(a=a3, b=b3, prevsum=res3, out=res4, aout=a4, bout=b4);
    MulStep(a=a4, b=b4, prevsum=res4, out=res5, aout=a5, bout=b5);
    MulStep(a=a5, b=b5, prevsum=res5, out=res6, aout=a6, bout=b6);
    MulStep(a=a6, b=b6, prevsum=res6, out=res7, aout=a7, bout=b7);
    MulStep(a=a7, b=b7, prevsum=res7, out=res8, aout=a8, bout=b8);
    MulStep(a=a8, b=b8, prevsum=res8, out=res9, aout=a9, bout=b9);
    MulStep(a=a9, b=b9, prevsum=res9, out=res10, aout=a10, bout=b10);
    MulStep(a=a10, b=b10, prevsum=res10, out=res11, aout=a11, bout=b11);
    MulStep(a=a11, b=b11, prevsum=res11, out=res12, aout=a12, bout=b12);
    MulStep(a=a12, b=b12, prevsum=res12, out=res13, aout=a13, bout=b13);
    MulStep(a=a13, b=b13, prevsum=res13, out=res14, aout=a14, bout=b14);
    MulStep(a=a14, b=b14, prevsum=res14, out=res15, aout=a15, bout=b15);
    MulStep(a=a15, b=b15, prevsum=res15, out=out, aout=a16, bout=b16);
}
